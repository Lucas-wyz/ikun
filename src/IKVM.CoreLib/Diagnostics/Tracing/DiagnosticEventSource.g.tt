<#@ template debug="false" hostspecific="true" language="C#" compilerOptions="/unsafe" #>
<#@ include file="..\Diagnostic.t4" #>
<#@ assembly name="System.CodeDom" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Buffers" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Buffers" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.CompilerServices" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
using System.Diagnostics.Tracing;

namespace IKVM.CoreLib.Diagnostics.Tracing
{

    public partial class DiagnosticEventSource
    {

<#
foreach (var i in DiagnosticFile.Read(Host.ResolvePath(Path.Combine("..", "Diagnostic.json"))))
{
    var desc = i.Value.Description;
    if (string.IsNullOrWhiteSpace(desc))
        desc = $"The '{i.Key}' diagnostic.";

    var message = i.Value.Message;
    if (string.IsNullOrWhiteSpace(message))
        message = "";

    var format = CompositeFormat.Parse(message);

    var argDecl = new List<string>();
    for (int j = 0; j < format.MinimumArgumentCount; j++)
        argDecl.Add("object arg" + (j+1).ToString());

    var argList = new List<string>();
    argList.Add(i.Value.Id.ToString());
    for (int j = 0; j < format.MinimumArgumentCount; j++)
        argList.Add("arg" + (j+1).ToString());

#>
        /// <summary>
        /// <#= desc #>
        /// </summary>
        [Event(<#= i.Value.Id #>, Message = <#= message #>, Level = EventLevel.<#= i.Value.Level.ToString() #>)]
        public void <#= i.Key #>(<#= string.Join(", ", argDecl) #>) => WriteEvent(<#= string.Join(", ", argList) #>);

<#
}
#>
    }

}

